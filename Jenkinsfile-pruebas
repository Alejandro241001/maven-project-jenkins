// Versión simplificada con la app, DockerFile y Jenkinsfile en repositorio propio
pipeline {

    agent any
    
    environment {
        repoApp= "https://github.com/angoies/maven-project-jenkins.git"
        rama = "master"
        gh_user = "Ango IES"
        gh_email = "ango.ies@gmail.com"

        dateTime = sh(returnStdout: true, script: 'date +%Y%m%d-%H%M').trim()
        repoDockerhub = "angoies/testing-jenkins"
        imagen = "${repoDockerhub}:${dateTime}"
    }
    
    stages {

        stage('Build App') {
            steps {
                git branch: "${rama}", credentialsId: 'github_credential', 
                            poll: false, url: "${repoApp}"
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Test') {
            steps {
                sh 'echo \'Realización de algunos Test\''
            }
        }

        stage('Push build App') {
            steps {               
                withCredentials(bindings: [usernamePassword(credentialsId: 'github_credential', 
                                            passwordVariable: 'password', usernameVariable: 'usuario')]) {
                    sh '''
                        mv webapp/target/webapp.war .
                        git add webapp.war
                        git config --global user.email "${gh_email}"
                        git config --global user.name  "${gh_user}"
                        git commit -m \'Desde Jenkinsfile\'
                        git config --local credential.helper "!f() { echo username=\\$usuario; echo password=\\$password; }; f"
                        git push origin ${rama}
                    '''
                }
            }
        }

        stage('Docker Build') {
            steps {          
                script { 
                    docker.build("${imagen}")
                }   
            }
        } 

        stage('Pushing Docker Image to Dockerhub') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker_credential') {
                        docker.image("${imagen}").push()
                        docker.image("${imagen}").push('latest')
                    }
                }
            }
        }

        stage('Deploy Docker Image') {
            steps {
                sh 'docker stop hello-world | true'
                sh 'docker rm hello-world | true'
                sh "docker run --name hello-world -d -it -p 8080:8080 ${imagen}"
            }
        }
    }   // Fin stages      
} // fin pipeline